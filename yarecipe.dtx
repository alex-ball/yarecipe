% \iffalse meta-comment
%<*internal|sty>
\def\Version{2020/05/17 v0.1}
%</internal|sty>
%<*internal>
\iffalse
%</internal>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
---------------------------------------------------------------------------
yarecipe --- Maps for interactive fiction with TikZ

 Author: Alex Ball
 E-mail: ab318@bath.ac.uk
License: Released under the LaTeX Project Public License v1.3c or later
    See: http://www.latex-project.org/lppl.txt
---------------------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2020 by Alex Ball <ab318@bath.ac.uk>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Alex Ball.

\endpostamble

\usedir{tex/latex/\jobname}
\generate{
  \file{yarecipe.sty}{\from{\jobname.dtx}{sty}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/\jobname}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{yarecipe.dtx}
%</driver>
%<sty>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<sty>\ProvidesPackage{yarecipe}
%<*sty>
    [\Version\space Yet another package for typesetting recipes]
%</sty>
%<*driver>
\documentclass[12pt]{article}
\usepackage[british]{babel}
% Page Layout
\usepackage[a4paper,hmargin=30mm,vmargin=25mm,nohead]{geometry}
% Typography
% \usepackage[charter,expert]{mathdesign}
% \makeatletter
% \def\hrulefill{\leavevmode\leaders \hrule height \rulethickness \hfill\kern\z@}
% \makeatother
\usepackage{iftex}
\ifPDFTeX
  \usepackage[utf8]{inputenc}
  \usepackage[T1]{fontenc}
  \usepackage[scaled=0.95,tabular]{sourceserifpro}
  \usepackage[scaled=0.95,tabular]{sourcesanspro}
  \usepackage[varl,varqu]{zi4}
\else
  \usepackage[no-math]{fontspec}
  \setmainfont
    [Scale=MatchLowercase
    ,Ligatures=TeX
    ]%
    {Source Serif Pro}
  \setsansfont
    [Scale=MatchLowercase
    ,Ligatures=TeX
    ,StylisticSet=4
    ,BoldFont={Source Sans Pro Bold}
    ,ItalicFont={Source Sans Pro Italic}
    ,BoldItalicFont={Source Sans Pro Bold Italic}
    ]%
    {Source Sans Pro}
  \setmonofont
    [Scale=MatchLowercase
    ,RawFeature={extend=0.83}
    ,BoldFont={Source Code Pro Bold}
    ,BoldItalicFont={Source Code Pro Bold}
    ,AutoFakeSlant=0.2
    ,ItalicFeatures={StylisticSet=2,StylisticSet=3}
    ,BoldItalicFeatures={FakeSlant=0.2,StylisticSet=2,StylisticSet=3}
    ]%
    {Source Code Pro}
\fi
\usepackage[italic]{mathastext}
% Improving the look of the documentation
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
\usepackage{multicol}
\usepackage{enumitem}
\setlist[itemize,enumerate]{%
  topsep={0pt plus 0.05em},%
  partopsep={0pt plus 0.05em},%
  itemsep={6pt plus 0.05em minus 0.05em},%
  parsep={0pt plus 0.05em},%
}
\usepackage[bookmarks,raiselinks,pageanchor,hyperindex,colorlinks,pdfencoding=auto]{hyperref}
\usepackage{bookmark}
\usepackage{etoolbox}
\usepackage{xstring,xpatch}
\usepackage{tcolorbox,doc}
\makeatletter
\renewenvironment{theglossary}{%
  \bgroup
    \glossary@prologue
    \GlossaryParms \let\item\@idxitem \ignorespaces
}{%
  \egroup
}
\makeatother
\tcbuselibrary{documentation,breakable,minted}
\colorlet{Option}{violet}
\colorlet{Command}{red!75!black}
\colorlet{Environment}{blue!75!black}
\colorlet{Value}{olive!75!black}
\colorlet{Color}{cyan!75!black}
\tcbset
  { listing engine=minted
  , minted options=
    { breaklines
    , fontsize=\footnotesize
    , linenos
    , numbersep=20pt
    , firstnumber=last
    }
  , index format=pgf
  , color command=Command
  , color environment=Environment
  , color key=Option
  , color value=Value
  , color color=Color
  , colbacktitle=ExampleFrame!33!ExampleBack
  , docexample/.append style = {parskip}
  }
\makeatletter
\RenewDocumentCommand\tcb@ref@doc{msm}{%
  \ifstrequal{#1}{com}{\hypersetup{linkcolor=\kvtcb@col@command}}{%
  \ifstrequal{#1}{env}{\hypersetup{linkcolor=\kvtcb@col@environment}}{%
  \ifstrequal{#1}{key}{\hypersetup{linkcolor=\kvtcb@col@key}}{%
  }}}%
  \hyperref[#1:#3]{\texttt{\ref*{#1:#3}}%
  \IfBooleanTF{#2}{}{%
    \ifnum\getpagerefnumber{#1:#3}=\thepage%
    \else%
      \textsuperscript{\ding{213}\,\kvtcb@text@pageshort\,\pageref*{#1:#3}}%
    \fi}}%
  \hypersetup{linkcolor=\kvtcb@colhyper}%
}
\makeatother
\renewcommand{\theFancyVerbLine}{\footnotesize\itshape\color{gray}\arabic{FancyVerbLine}}
\let\tcbcs=\cs
\renewcommand*{\cs}[1]{\textcolor{Command}{\tcbcs{#1}}}
\def\sqbrackets#1{%
  \texttt{\textcolor{Option}{[}#1\textcolor{Option}{]}}}
\def\brackets#1{%
  \texttt{\textcolor{Environment}{\char`\{}#1\textcolor{Environment}{\char`\}}}}
\def\marg#1{%
  \textcolor{Environment}{\ttfamily\char`\{}\meta{#1}\textcolor{Environment}{\ttfamily\char`\}}}
\newcommand*{\env}[1]{\textcolor{Environment}{\ttfamily #1}}
\newcommand*{\key}[1]{\textcolor{Option}{\ttfamily #1}}
\newcommand*{\val}[1]{\textcolor{Value}{\ttfamily #1}}
\makeatletter
\renewenvironment{macro}[1]{%
  \StrSubstitute{#1}{\detokenize{@}}{"@}[\MyName]%
  \edef\saved@macroname{\expandafter\string\csname #1\endcsname}%
  \let\saved@indexname\saved@macroname
  \index{\MyName @\tcbIndexPrintComC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed a macro environment you have not opened on \the\inputlineno.}%
  }
  \index{\MyName @\tcbIndexPrintComC {\MyName}|)}%
}
\renewenvironment{environment}[1]{%
  \StrSubstitute{#1}{\detokenize{@}}{"@}[\MyName]%
  \edef\saved@macroname{#1}%
  \let\saved@indexname\saved@macroname
  \index{\MyName @\tcbIndexPrintEnvCA {\MyName}|(emph}%
  \index{Environments!\MyName @\tcbIndexPrintEnvC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an environment environment you have not opened on \the\inputlineno.}%
  }
  \index{Environments!\MyName @\tcbIndexPrintEnvC {\MyName}|)}%
  \index{\MyName @\tcbIndexPrintEnvCA {\MyName}|)}%
}
\makeatother
\newenvironment{optionkey}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintKeyCA {\MyName}|(emph}%
  \index{Keys!\MyName@\tcbIndexPrintKeyC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an optionkey environment you have not opened on \the\inputlineno.}%
  }
  \index{Keys!\MyName@\tcbIndexPrintKeyC {\MyName}|)}%
  \index{\MyName@\tcbIndexPrintKeyCA {\MyName}|)}%
}
\newenvironment{optionvalue}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintValCA {\MyName}|(emph}%
  \index{Values!\MyName@\tcbIndexPrintValC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an optionvalue environment you have not opened on \the\inputlineno.}%
  }
  \index{Values!\MyName@\tcbIndexPrintValC {\MyName}|)}%
  \index{\MyName@\tcbIndexPrintValCA {\MyName}|)}%
}
\makeatletter
\newcommand{\resetmintedformat}{%
  % Comments
  \expandafter\def\csname PYGdefault@tok@c\endcsname{\let\PYGdefault@it=\textit\def\PYGdefault@tc####1{\textcolor{gray}{####1}}}
  % Command sequences
  \expandafter\def\csname PYGdefault@tok@k\endcsname{\def\PYGdefault@tc####1{\textcolor{Command}{####1}}}
  % Optional arguments
  \expandafter\def\csname PYGdefault@tok@na\endcsname{\def\PYGdefault@tc####1{\textcolor{Option}{####1}}}
  % Braces
  \expandafter\def\csname PYGdefault@tok@nb\endcsname{\def\PYGdefault@tc####1{\textcolor{Environment}{####1}}}
}
\apptocmd{\minted@checkstyle}{\resetmintedformat}{}{}
\makeatother
\newcommand{\pkg}[1]{\href{http://www.ctan.org/pkg/#1}{\textsf{#1}}}
\MakeShortVerb{\|}
\makeatletter
\let\PrintMacroName\@gobble
\let\PrintEnvName\@gobble
\renewenvironment{tcb@manual@entry}{\begin{list}{}{%
  \setlength{\topsep}{0pt}
  \setlength{\partopsep}{0pt}
  \setlength{\leftmargin}{\kvtcb@doc@left}%
  \setlength{\itemindent}{0pt}%
  \setlength{\itemsep}{0pt}%
  \setlength{\parsep}{0pt}%
  \setlength{\rightmargin}{\kvtcb@doc@right}%
  }\item}{\end{list}}
\makeatother
% This bit inspired by ydoc
\makeatletter
\newwrite\ydocwrite
\def\ydocfname{\jobname.tcbtemp}
\def\ydoc@catcodes{%
  \let\do\@makeother
  \dospecials
  \catcode`\\=\active
  \catcode`\^^M=\active
  \catcode`\ =\active
}
\def\macrocode{%
  \begingroup
  \ydoc@catcodes
  \macro@code
}
\def\endmacrocode{}
\begingroup
\endlinechar\m@ne
\@firstofone{%
\catcode`\|=0\relax
\catcode`\(=1\relax
\catcode`\)=2\relax
\catcode`\*=14\relax
\catcode`\{=12\relax
\catcode`\}=12\relax
\catcode`\ =12\relax
\catcode`\%=12\relax
\catcode`\\=\active
\catcode`\^^M=\active
\catcode`\ =\active
}*
|gdef|macro@code#1^^M%    \end{macrocode}(*
|endgroup|expandafter|macro@@code|expandafter(|ydoc@removeline#1|noexpand|lastlinemacro)*
)*
|gdef|ydoc@removeline#1^^M(|noexpand|firstlinemacro)*
|gdef|ydoc@defspecialmacros(*
|def^^M(|noexpand|newlinemacro)*
|def (|noexpand|spacemacro)*
|def\(|noexpand|bslashmacro)*
)*
|gdef|ydoc@defrevspecialmacros(*
|def|newlinemacro(|noexpand^^M)*
|def|spacemacro(|noexpand )*
|def|bslashmacro(|noexpand\)*
)*
|endgroup
\def\macro@@code#1{%
  {\ydoc@defspecialmacros
  \xdef\themacrocode{#1}}%
  \PrintMacroCode
  \end{macrocode}%
}
\def\PrintMacroCode{%
  \begingroup
  \let\firstlinemacro\empty
  \let\lastlinemacro\empty
  \def\newlinemacro{^^J}%
  \let\bslashmacro\bslash
  \let\spacemacro\space
  \immediate\openout\ydocwrite=\ydocfname\relax
  \immediate\write\ydocwrite{\themacrocode}%
  \immediate\closeout\ydocwrite
  \let\input\@input
  \tcbinputlisting{breakable,listing only,docexample,listing file=\ydocfname}%
  \endgroup
}
\makeatother

\usepackage{csquotes}
\usepackage{array}
%\setlength{\fboxsep}{0pt}

\usepackage{yarecipe}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}

\GetFileInfo{\jobname.dtx}
\DoNotIndex{\newcommand,\newenvironment}

\title{\textsf{yarecipe} --- Yet another package for typesetting
  recipes\thanks{This file describes version \fileversion,
  last revised \filedate.}
}
\author{Alex Ball\thanks{E-mail: ab318@bath.ac.uk}}
\date{Released \filedate}

\maketitle

\changes{v0.1}{2019/02/19}{First public release}

\begin{abstract}
This is yet another package for typesetting recipes in the German style,
with the ingredients list set in parallel with the method,
so each item appears where it is first used in the recipe.
\end{abstract}

\section{Introduction}

When I first saw the \pkg{cooking} package, I was highly impressed with the
idea of setting ingredients next to where they are used in a recipe. But
that package encourages you to split your sentences across both columns:

\begin{center}
\begin{tabular}{>{\itshape}rl}
& \large\itshape Dough\\[1ex]
& Take\\
25\,g butter & and\\
100\,g flour & and mix them together.\\
\end{tabular}
\end{center}

Which is a bit weird, and works better in German than in English since in German
the nouns typically come first.

Then I saw the \pkg{cuisine} package, the output of which is the same basic idea
but providing more separation between ingredient and method. And, indeed, within
ingredients.

\begin{center}
\begin{tabular}{@{}rr@{\space}lll@{}}
\multicolumn{4}{@{}l}{Dough} & \multicolumn{1}{r@{}}{2 portions}\\\hline
\multicolumn{5}{r@{}}{5 minutes} \\[1ex]
1 & 25 & g & butter & Mix the butter and\\
  & 100 & g & flour & flour together.\\[1ex]
2 & 2 & lvl tsp & cocoa & Stir in the cocoa.\\
\end{tabular}
\end{center}

Ruthlessly logical and highly configurable. I used it happily for many years,
but in the end the aesthetics got to me.

What I wanted was something basically the same as \pkg{cuisine}, but looking a
bit more, well, normal. And the thing I wanted more than anything was for it to
choose a suitable set of column widths for me automatically. Life's too short to
have to do that yourself. Hence, yet another recipe package.

So the idea is that each method step is set as a single-line paragraph. On the
line are three boxes: an ingredients box, a step number box, and a method box.
(It makes more sense to me to number the method steps rather than the whole
line.) The ingredients box contains a sequence of hanging paragraphs, where
numerical quantities are optionally right-aligned in the first line outdent. The
step number box is a simple horizontal box. The method box is a regular
minipage.

The size of these boxes changes dynamically:

\begin{itemize}
\item The hanging indent in the ingredients column is the width of largest
  numerical ingredient quantity (hence typically no wider than about five
  characters).
\item The whole ingredients column is as wide as the widest ingredient, up to
  a defined maximum.
\item The step number box is as wide as the widest step number plus defined
  margins.
\item The method column takes up the remaining line width.
\end{itemize}

\section{Usage}

\subsection{Loading}

Load the package as normal. There are no package options.

\begin{dispListing}
\usepackage{yarecipe}
\end{dispListing}

\subsection{Explicit syntax for setting a recipe}

Internally, recipes are set as follows:

\begin{dispExample*}{sidebyside}
\begin{YARecipe}{Recipe name}[note]
\begin{YARIngBox}
\YARIng[½]{lb tuppenny rice}
\YARIng[½]{lb treacle}
\end{YARIngBox}%
\begin{YARMethodBox}
That's the way the money goes.
Pop goes the weasel.
\end{YARMethodBox}
\end{YARecipe}
\end{dispExample*}

\begin{docEnvironment}{YARecipe}{\oarg{options}\marg{title}\oarg{note}}
Typesets the recipe title and wraps the recipe content. The \meta{title} is
shown on the left and \meta{note} is on the right. The \meta{environment
content} should be an alternating sequence of \refEnv*{YARIngBox}es and
\refEnv*{YARMethodBox}es. Whole paragraphs can be included between pairs of
boxes. See section \ref{sec:options} for the available \meta{options}.
\end{docEnvironment}

If you don't like the given titling and would rather roll your own,
or if you need to split your recipe across multiple environments,
the package provides for simply typesetting the steps without the titling.

\begin{dispExample*}{sidebyside}
\begin{YARecipeSteps}[first step=3]
\begin{YARIngBox}
\YARIng[½]{lb tuppenny rice}
\YARIng[½]{lb treacle}
\end{YARIngBox}%
\begin{YARMethodBox}
That's the way the money goes.
Pop goes the weasel.
\end{YARMethodBox}
\end{YARecipeSteps}
\end{dispExample*}

\begin{docEnvironment}{YARecipeSteps}{\oarg{options}}
Wraps the recipe content without setting a title or affecting the recipe
counter, page headers, table of contents, and so on.
See section \ref{sec:options} for the available \meta{options}.
\end{docEnvironment}

\begin{docEnvironment}{YARIngBox}{}
Typesets the ingredients needed for the current method step. The
\meta{environment content} should be a sequence of \refCom*{YARIng} commands.
\end{docEnvironment}

\begin{docCommand}{YARIng}{\oarg{number}\marg{unit and foodstuff}}
Typesets an ingredient. If \meta{number} is provided, it will be set in a
right-aligned box the width of the hanging indent, followed by a space.
Otherwise, the \meta{foodstuff} will be set normally in a hanging paragraph.
You can abuse this as you will (perhaps putting \enquote{a} or \enquote{some}
as the \meta{number}) but the \meta{number} must be short or the result will
look odd. So for example, you might end up with this:\par\smallskip

\begin{tcolorbox}[docexample,sidebyside,righthand width=13em]
\begin{dispListing*}{blankest,documentation minted options={breaklines}}
\YARIng[2]{lemons, oranges, or some other citrus fruit}
\YARIng[200]{g self-raising or strong bread flour}
\YARIng{A pinch of salt and pepper to taste}
\end{dispListing*}
\tcblower
\begin{adjustbox}{center,minipage=13em}\raggedright
\hangpara{1.7em}{1}\makebox[1.7em][r]{2\space}lemons, oranges, or some other citrus fruit\par
\hangpara{1.7em}{1}\makebox[1.7em][r]{200\space}g self-raising or strong bread flour\par
\hangpara{1.7em}{1}A pinch of salt and pepper to taste
\end{adjustbox}
\end{tcolorbox}
\end{docCommand}

\begin{docEnvironment}{YARMethodBox}{}
Typesets the step number (in its horizontal box) and the method text (in a
minipage).
\end{docEnvironment}

\subsection{Implicit syntax for setting a recipe}

The explicit syntax is all very well, but it's a lot of typing. Therefore a
shorthand version is provided.

\begin{docEnvironment}{recipe}{\oarg{options}\marg{title}\oarg{note}}
Wraps around the \refEnv*{YARecipe} environment. The arguments are used in the
same way.
\end{docEnvironment}

\begin{docEnvironment}{recipesteps}{\oarg{options}}
Wraps around the \refEnv*{YARecipeSteps} environment.
See section \ref{sec:options} for the available \meta{options}.
\end{docEnvironment}

\begin{docCommand}{ing}{\oarg{number}\marg{unit and foodstuff}}
The arguments are used in the same way as for the \refCom*{YARIng} command. The
difference is that the first \cs{ing} in a series will start a
\refEnv*{YARIngBox}, and the last will close it and start a
\refEnv*{YARMethodBox}.
\end{docCommand}

\begin{docCommand}{newstep}{}
Closes the current \refEnv*{YARMethodBox}, inserts an empty \refEnv*{YARIngBox},
and opens a new \refEnv*{YARMethodBox}.
\end{docCommand}

This means you can write a recipe like this instead:

\begin{dispExample*}{sidebyside}
\begin{recipe}{Recipe name}[note]
\ing[½]{lb tuppenny rice}
\ing[½]{lb treacle}
That's the way the money goes.
\newstep
Pop goes the weasel.
\end{recipe}
\end{dispExample*}

\subsection{Recipe sections}

By default, all recipes in a document will use the same widths, as this gives
a pleasing effect when several recipes appear on the same page. You may,
however, have some recipes with unusual ingredient lengths, or set extra wide
or narrow, and would rather isolate them from your other recipes.

The simple solution employed in this package is the concept of a recipe section.
All recipes in a recipe section have the same widths, but each recipe section's
widths are calculated independently from those of the others.

\begin{docCommand}{yarsection}{}
Starts a new recipe section.
\end{docCommand}

Recipe sections relate only to recipe geometry and do not interact with document
sections or numbering.

\subsection{Recipe configuration}
\label{sec:options}

\begin{docCommand}{yarset}{\marg{keys}}
Processes \meta{keys} to configure subsequent recipes.
\end{docCommand}

You can adapt the appearance of recipes with the following keys.

\begin{docKey}{numbered}{=\meta{Boolean}}{default \val{true}, initially \val{false}}
Whether recipes (or the current recipe) is numbered.
\end{docKey}

\begin{docKey}{in toc}{=\meta{Boolean}}{default \val{true}, initially \val{false}}
Whether recipes (or the current recipe) is listed in the table of contents.
\end{docKey}

\begin{docKey}{toc level}{=\meta{level}}{initially \val{subsection}}
At what section level recipes should included in the table of contents.
The value must be a valid section for the class in use, e.g.\@
\val{section}, \val{subsection}, \val{subsubsection}.
\end{docKey}

\begin{docKey}{mark}{=\val{both}\textbar\val{right}}{initially empty}
If set to \docValue{both}, the recipe title will be pushed to both \cs{leftmark}
and \cs{rightmark}. If set to \docValue{right}, the recipe title will be pushed
to \cs{rightmark}. If left unset, page headers will be left unaffected.
As currently implemented, this key should be set \emph{either} once (globally)
\emph{or} on a per-recipe basis.
\end{docKey}

\begin{docKey}{label}{=\meta{label}}{initially empty}
If set for a given recipe, enables cross references to it using
\cs{ref}\marg{label} and friends.
\end{docKey}


\begin{docKey}{recipe number font}{=\meta{font}}{initially \cs{bfseries}}
Font used to set each recipe number.
\end{docKey}

\begin{docKey}{recipe number format}{=\meta{code}}{initially \cs{theYARnumber}\cs{quad}}
Font used to set each recipe number.
\end{docKey}

\begin{docKey}{title font}{=\meta{font}}{initially \cs{bfseries}}
Font used to set the recipe title.
\end{docKey}

\begin{docKey}{note font}{=\meta{font}}{initially \cs{itshape}}
Font used to set the note adjacent to the title.
\end{docKey}

\begin{docKey}{pre ingredient hook}{=\meta{code}}{initially \cs{raggedright}}
Generic hook executed at the beginning of the \refEnv*{YARIngBox}. Useful for
setting the paragraph justification.
\end{docKey}

\begin{docKey}{ingredient font}{=\meta{font}}{initially \cs{normalfont}}
Font used to set each ingredient (both the quantity and the foodstuff).
\end{docKey}

\begin{docKey}{post ingredient hook}{=\meta{code}}{initially \cs{strut}}
Generic hook executed at the end of the \refEnv*{YARIngBox}.
\end{docKey}

\begin{docKey}{first step}{=\meta{integer}}{initially 1}
Number for the first step in this environment.
\end{docKey}

\begin{docKey}{step number font}{=\meta{font}}{initially \cs{itshape}}
Font used to set each step number.
\end{docKey}

\begin{docKey}{step number format}{=\meta{code}}{initially \brackets{\cs{theYARstep}.\cs{space}}}
Code used to typeset the step number, which is stored in the counter
\docCounter{YARstep}.
\end{docKey}

\begin{docKey}{pre method hook}{=\meta{code}}{initially empty}
Generic hook executed at the beginning of the \refEnv*{YARMethodBox}. Useful for
setting the paragraph justification.
\end{docKey}

\begin{docKey}{method font}{=\meta{font}}{initially \cs{normalfont}}
Font used to set the method.
\end{docKey}

\begin{docKey}{post method hook}{=\meta{code}}{initially \cs{strut}}
Generic hook executed at the end of the \refEnv*{YARMethodBox}.
\end{docKey}

\begin{docKey}{before recipe skip}{=\meta{glue expr}}{initially \cs{bigskipamount}}
Vertical space to insert before a recipe.
\end{docKey}

\begin{docKey}{step skip}{=\meta{glue expr}}{initially 0.5em plus 0.2em minus 0.1em}
Vertical space inserted before each recipe step
\end{docKey}

\begin{docKey}{after recipe skip}{=\meta{glue expr}}{initially \cs{bigskipamount}}
Vertical space to insert after a recipe.
\end{docKey}

\begin{docKey}{min indent width}{=\meta{glue expr}}{initially 1em}
Minimum width of the hanging indent for ingredients. Takes effect from the
beginning of the next recipe section, so use in the preamble to affect the first
recipe section.
\end{docKey}

\begin{docKey}{max indent width}{=\meta{glue expr}}{initially 0pt}
Maximum width of the hanging indent for ingredients. Only the last setting in
the recipe section is effective. A setting of 0pt or less is interpreted as no
maximum. If you set this to a positive value, numeric quantities marked up as
such will be able to protrude into the left margin.
\end{docKey}

\begin{docKey}{min ingredient width}{=\meta{glue expr}}{initially 0pt}
Minimum width of the ingredients column. Takes effect from the beginning of the
next recipe section, so use in the preamble to affect the first recipe section.
\end{docKey}

\begin{docKey}{max ingredient width}{=\meta{glue expr}}{initially .4\cs{textwidth}}
Maximum width of the ingredients column. Only the last setting in the recipe
section is effective. A setting of 0pt or less is interpreted as no maximum, but
you probably don't want that.
\end{docKey}

\section{Examples}

See the pizza recipe \ref{pizza} on page \pageref{pizza}.

\yarsection

\begin{recipe}[pre method hook=,in toc,before recipe skip=0pt,numbered]{Mug cake}[Makes one cake]
\ing[4]{tbsp self-raising flour}
\ing[4]{tbsp caster sugar}
\ing[2]{tbsp cocoa powder}
Add the self-raising flour, caster sugar and cocoa powder to the largest mug you have (to stop it overflowing in the microwave) and mix.
\ing[1]{medium egg}
Add the egg and mix in as much as you can, but don't worry if there's still dry mix left.
\ing[3]{tbsp milk}
\ing[3]{tbsp vegetable\slash sunflower oil}
\ing{a few drops of vanilla essence (or orange or peppermint)}
Add the milk, vegetable or sunflower oil, and a few drops of vanilla essence, and mix until smooth.
\ing[10]{tbsp chocolate chips, nuts, or raisins, etc.\@ (optional)}
If you like, add chocolate chips, nuts, or raisins, and mix again.
\newstep
Centre your mug in the middle of the microwave oven and cook on High for 1½--2 mins, or until it has stopped rising and is firm to the touch.
\end{recipe}

The recipes above and below use the same widths.

\begin{recipe}{Pizza dough}[Serves two hungry people]
\ing[200]{$\!$g self-raising flour}
\ing[200]{$\!$g Greek yoghurt}
Mix with a fork and then by hand until a dough is formed.
\end{recipe}

\yarsection
But if we start a new recipe section here, you can see the geometry changes:

\begin{recipe}[numbered,label=pizza]{Pizza dough}[Serves two hungry people]
\ing[200]{$\!$g self-raising flour}
\ing[200]{$\!$g Greek yoghurt}
Mix with a fork and then by hand until a dough is formed.
\end{recipe}

\StopEventually{%
\clearpage
\PrintChanges
\PrintIndex
}

\clearpage

\section{Implementation}

\setcounter{FancyVerbLine}{20}%
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \iffalse %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*sty>
% \fi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \subsection{Dependencies}
%
% We use tests from \pkg{etoolbox}, define macros with \pkg{xparse}, hang
% paragraphs with \pkg{hanging}, measure text with \pkg{adjustbox}, and set
% keys with \pkg{pgfkeys}.
%
%    \begin{macrocode}
\RequirePackage{etoolbox}
\RequirePackage{xparse}
\ifcsdef{hangpara}{}{\RequirePackage{hanging}}
\RequirePackage{adjustbox}
\RequirePackage{pgfkeys}
%    \end{macrocode}
%
% \subsection{Customization hooks}
%
% We define our own key handler.
%
%    \begin{macrocode}
\pgfkeys{/yar/.is family}
\def\yarset{\pgfqkeys{/yar}}
\def\YARtempcs{}
\def\yarget#1{\yarset{#1/.get=\YARtempcs}}
%    \end{macrocode}
%
% We provide keys to customize the fonts used.
%
%    \begin{macrocode}
\yarset{
  recipe number font/.store in=\YARNumFont,
  recipe number font=\bfseries,
  title font/.store in=\YARTitleFont,
  title font=\bfseries,
  note font/.store in=\YARNoteFont,
  note font=\itshape,
  ingredient font/.store in=\YARIngredientFont,
  ingredient font=\normalfont,
  step number font/.store in=\YARStepNumFont,
  step number font=\normalfont\itshape,
  method font/.store in=\YARMethodFont,
  method font=\normalfont,
}
%    \end{macrocode}
%
% We provide keys to inject code into recipes.
%
%    \begin{macrocode}
\def\YARStartStep{1}
\yarset{
  recipe number format/.store in=\YARDoNum,
  recipe number format={\theYARnumber\quad},
  pre ingredient hook/.store in=\YARIngBoxPreHook,
  pre ingredient hook=\raggedright,
  post ingredient hook/.store in=\YARIngBoxPostHook,
  post ingredient hook=\strut,
  first step/.store in=\YARStartStep,
  step number format/.store in=\YARDoStepNum,
  step number format={\theYARstep.\space},
  pre method hook/.store in=\YARMethodBoxPreHook,
  pre method hook=,
  post method hook/.store in=\YARMethodBoxPostHook,
  post method hook=\strut,
}
%    \end{macrocode}
%
% We provide widths that set limits on how wide or narrow the ingredient
% column can go. The length \cs{yaringredientwidthmax} is an absolute maximum,
% and defaults to 40\% of the text width at the point the package is loaded.
% The length \cs{yaringredientwidthmin} sets the minimum, but will be ignored
% if the \cs{yaringredientwidthmax} is smaller or the widest numeric quantity
% is larger.
%
%    \begin{macrocode}
\newlength{\YARIngDentWidthMin}
\newlength{\YARIngDentWidthMax}
\newlength{\YARIngBoxWidthMin}
\newlength{\YARIngBoxWidthMax}
\newlength{\YARPreRecipeSkip}
\newlength{\YARStepSkip}
\newlength{\YARPostRecipeSkip}
\yarset{
  min indent width/.code={\deflength\YARIngDentWidthMin{#1}},
  min indent width=1em,
  max indent width/.code={\deflength\YARIngDentWidthMax{#1}},
  min ingredient width/.code={\deflength\YARIngBoxWidthMin{#1}},
  max ingredient width/.code={\deflength\YARIngBoxWidthMax{#1}},
  max ingredient width=.4\textwidth,
  before recipe skip/.code={\deflength\YARPreRecipeSkip{#1}},
  before recipe skip=\bigskipamount,
  step skip/.code={\deflength\YARStepSkip{#1}},
  step skip=0.5em plus 0.2em minus 0.1em,
  after recipe skip/.code={\deflength\YARPostRecipeSkip{#1}},
  after recipe skip=\bigskipamount,
}
%    \end{macrocode}
%
% We provide keys relevant to indexing and page furniture.
%
%    \begin{macrocode}
\newif\ifYARnumbered
\newcounter{YARnumber}
\newif\ifYARecipeInTOC
\newif\ifYARMarkBoth
\newif\ifYARMarkRight
\newif\ifYARecipeInTOC
\yarset{
  numbered/.is if=YARnumbered,
  in toc/.is if=YARecipeInTOC,
  toc level/.initial=subsection,
  mark/.is choice,
  mark/both/.is if=YARMarkBoth,
  mark/right/.is if=YARMarkRight,
  label/.initial=,
}
%    \end{macrocode}
%
% \subsection{Recipe sections}
%
% To ensure a consistent appearance down the page, consecutive recipes have the
% same geometry, but it we introduce the idea of a recipe section so that not
% all recipes in the document have to have exactly the same geometry.
%
%    \begin{macrocode}
\newcounter{YARsection}
%    \end{macrocode}
%
% Within each recipe, we parameterize the geometry with these four lengths,
% where |-n-| is the number of the recipe section:
% \begin{itemize}
% \item\cs{YAR-n-IngDentWidth} is the size of the hanging indent in the
%   ingredient column;
% \item\cs{YAR-n-IngColWidth} is the width of the ingredient column;
% \item\cs{YAR-n-StepColWidth} is the width of the step number column;
% \item\cs{YARMethodColWidth} is the width of the method column.
% \end{itemize}
%
% In due course, the section-specific widths are calculated are based on the
% width of column content. In order to keep track of column content, we need
% three more lengths:
%
% \begin{itemize}
% \item\cs{YARWidestIngDent} is the width of the widest numerical quantity
%   (the optional argument of \cs{ing} plus a space) in the recipe section;
% \item\cs{YARWidestFoodstuff} is the width of the widest non-numerical part
%   of an ingredient (the mandatory argument of \cs{ing}) in the recipe section;
% \item\cs{YARWidestIngredient} is the width of the widest ingredient in the
%   recipe section;
% \item\cs{YARWidestStepNum} is the width of the widest step number (plus a dot
%   and space) in the section.
% \end{itemize}
%
% \cs{YARMethodColWidth} is calculated at the start of each recipe to take up
% the remaining space on the line.
%
%    \begin{macrocode}
\newlength{\YARWidestIngDent}
\newlength{\YARWidestFoodstuff}
\newlength{\YARWidestIngredient}
\newlength{\YARWidestStepNum}
\newlength{\YARMethodColWidth}
%    \end{macrocode}
%
% We need another length, \cs{YARtempdim}, to help with calculations:
%
%    \begin{macrocode}
\newlength{\YARtempdim}
%    \end{macrocode}
%
% At the end of each section, the widths the section should have had are
% calculated and saved to the aux file. If these are different from what the
% section \emph{actually} had, we set a toggle, |YARrerun|, to true.
%
%    \begin{macrocode}
\newtoggle{YARrerun}
%    \end{macrocode}
%
% Note that, since the aux file is read twice, we don't know if the lengths in
% question have been initialized at the point it is read. We therefore have to
% test for this before performing the initialization.
%
%    \begin{macrocode}
\def\YARCaclulateWidths{%
%    \end{macrocode}
%
% \cs{YAR-n-IngDentWidth} is set to the \cs{YARWidestIngDent}.
%
%    \begin{macrocode}
  \deflength{\YARtempdim}{\YARWidestIngDent}%
  \ifboolexpr{
    test {\ifdimcomp{\YARIngDentWidthMax}{>}{0pt}}
    and
    test {\ifdimcomp{\YARtempdim}{>}{\YARIngDentWidthMax}}
  }{%
    \deflength{\YARtempdim}{\YARIngDentWidthMax}}{}%
  \ifdimequal{\csname YAR\theYARsection IngDentWidth\endcsname}%
    {\YARtempdim}{}{\global\toggletrue{YARrerun}}%
  \immediate\write\@auxout{%
    \string\ifcslength{YAR\theYARsection IngDentWidth}{}{%
    \string\expandafter\string\newlength\string\csname\space YAR\theYARsection IngDentWidth\string\endcsname}^^J
    \string\expandafter\string\global\string\expandafter\string\deflength
    \string\csname\space YAR\theYARsection IngDentWidth\string\endcsname{%
      \the\YARtempdim
    }}%
%    \end{macrocode}
%
% \cs{YAR-n-IngColWidth} is set to whichever is the narrowest of
% \cs{yaringredientwidthmax} and [the widest of (\cs{YARWidestIngDent} $+$
% \cs{YARWidestFoodstuff}), \cs{YARWidestIngredient} and
% \cs{yaringredientwidthmin}].
%
%    \begin{macrocode}
  \deflength{\YARtempdim}{\YARWidestIngDent + \YARWidestFoodstuff}%
  \ifdimcomp{\YARtempdim}{<}{\YARWidestIngredient}{%
    \deflength{\YARtempdim}{\YARWidestIngredient}}{}%
  \ifboolexpr{
    test {\ifdimcomp{\YARIngBoxWidthMax}{>}{0pt}}
    and
    test {\ifdimcomp{\YARtempdim}{>}{\YARIngBoxWidthMax}}
  }{%
    \deflength{\YARtempdim}{\YARIngBoxWidthMax}}{}%
  \ifdimequal{\csname YAR\theYARsection IngColWidth\endcsname}%
    {\YARtempdim}{}{\global\toggletrue{YARrerun}}%
  \immediate\write\@auxout{%
    \string\ifcslength{YAR\theYARsection IngColWidth}{}{%
    \string\expandafter\string\newlength\string\csname\space YAR\theYARsection IngColWidth\string\endcsname}^^J
    \string\expandafter\string\global\string\expandafter\string\deflength
    \string\csname\space YAR\theYARsection IngColWidth\string\endcsname{%
      \the\YARtempdim
    }}%
%    \end{macrocode}
%
% \cs{YAR-n-StepColWidth} is set to \cs{YARWidestStepNum} plus a hard-coded
% 1em margin. (This could be made configurable.)
%
%    \begin{macrocode}
  \deflength{\YARtempdim}{\YARWidestStepNum + 1em}%
  \ifdimequal{\csname YAR\theYARsection StepColWidth\endcsname}%
    {\YARtempdim}{}{\global\toggletrue{YARrerun}}%
  \immediate\write\@auxout{%
    \string\ifcslength{YAR\theYARsection StepColWidth}{}{%
    \string\expandafter\string\newlength\string\csname\space YAR\theYARsection StepColWidth\string\endcsname}^^J
    \string\expandafter\string\global\string\expandafter\string\deflength
    \string\csname\space YAR\theYARsection StepColWidth\string\endcsname{%
      \the\YARtempdim
    }}%
}
%    \end{macrocode}
%
% When we start a new section, we increment the section counter. If the widths
% for this section have not been initialized by the aux file, we initialize them
% with some reasonable values. We also need to reset the widest widths back
% to zero.
%
%    \begin{macrocode}
\NewDocumentCommand\YARStartNewSection{}{%
  \stepcounter{YARsection}%
  \ifcslength{YAR\theYARsection IngDentWidth}{}{%
    \expandafter\newlength\csname YAR\theYARsection IngDentWidth\endcsname
    \expandafter\global\expandafter\deflength\csname YAR\theYARsection IngDentWidth\endcsname{1em}}%
  \ifcslength{YAR\theYARsection IngColWidth}{}{%
    \expandafter\newlength\csname YAR\theYARsection IngColWidth\endcsname%
    \expandafter\global\expandafter\deflength\csname YAR\theYARsection IngColWidth\endcsname{10em}}%
  \ifcslength{YAR\theYARsection StepColWidth}{}{%
    \expandafter\newlength\csname YAR\theYARsection StepColWidth\endcsname%
    \expandafter\global\expandafter\deflength\csname YAR\theYARsection StepColWidth\endcsname{3em}}%
  \global\deflength{\YARWidestIngDent}{\YARIngDentWidthMin}%
  \global\deflength{\YARWidestFoodstuff}{0pt}%
  \global\deflength{\YARWidestIngredient}{\YARIngBoxWidthMin}%
  \global\deflength{\YARWidestStepNum}{0pt}%
}
%    \end{macrocode}
%
% We start the first recipe section automatically at the beginning of the
% document.
%
%    \begin{macrocode}
\AtBeginDocument{\YARStartNewSection}
%    \end{macrocode}
%
% The user-facing command for this ends the current recipe section and starts a
% new one.
%
%    \begin{macrocode}
\NewDocumentCommand\yarsection{}{\YARCaclulateWidths\YARStartNewSection}
%    \end{macrocode}
%
% We close off the final recipe section at the end of the document and request
% another run if we need to.
%
%    \begin{macrocode}
\AtEndDocument{%
  \YARCaclulateWidths
  \iftoggle{YARrerun}{%
   \@latex@warning@no@line{Rerun to correct yarecipe widths}%
  }%
}
%    \end{macrocode}
%
% \section{Explicit syntax}
%
% We provide a verbose syntax, where the recipe is set in \env{YARecipe}, and
% each row is a \env{YARIngBox} followed by a \env{YARMethodBox}.
%
% The \env{YARIngBox} is a \env{minipage} of appropriate width, begun and ended
% with the hooks provided above.
%
%    \begin{macrocode}
\NewDocumentEnvironment{YARIngBox}{}{%
\begin{minipage}[t]{\csname YAR\theYARsection IngColWidth\endcsname}%
\YARIngBoxPreHook
}{%
\YARIngBoxPostHook
\end{minipage}%
}
%    \end{macrocode}
%
% We need a counter for the steps within a recipe, and a toogle to let us know
% if we are currently within a a \env{YARMethodBox}.
%
%    \begin{macrocode}
\newcounter{YARstep}
\newtoggle{inYARMethodBox}
%    \end{macrocode}
%
% When we start a \env{YARMethodBox}, we measure the step number and record the
% width if it is wider than before, then set it in a simple \cs{makebox} of the
% correct width and increment the counter. We then start a \env{minipage} of
% appropriate width, begun and ended with the hooks provided above. We also set
% the paragraph shape and font. Paragraphs within a step have the same spacing
% as between steps. The toggle is on within the environment.
%
%    \begin{macrocode}
\NewDocumentEnvironment{YARMethodBox}{}{%
  \adjustbox{gstore width=\YARtempdim,discard}{\YARStepNumFont\YARDoStepNum}%
  \ifdimcomp{\YARtempdim}{>}{\YARWidestStepNum}{%
    \global\deflength{\YARWidestStepNum}{\YARtempdim}}{}%
  \makebox[\csname YAR\theYARsection StepColWidth\endcsname][r]%
    {\YARStepNumFont\YARDoStepNum}%
  \stepcounter{YARstep}%
  \toggletrue{inYARMethodBox}%
  \begin{minipage}[t]{\YARMethodColWidth}%
  \YARMethodBoxPreHook
  \deflength\parindent{0pt}%
  \deflength\parskip{\YARStepSkip}%
  \YARMethodFont
}{%
  \YARMethodBoxPostHook
  \end{minipage}\par
  \togglefalse{inYARMethodBox}%
}
%    \end{macrocode}
%
% The explicit form of the ingredient command is \cs{YARIng}. If both arguments
% are set, their widths are measured individually, updating \cs{YARWidestIngDent}
% and \cs{YARWidestFoodstuff} respectively. If only one argument is given,
% the width is used to update \cs{YARWidestIngredient} instead.
%
% The ingredient is set as a hanging paragraph, with pre- and post-hooks and
% font applied. The optional argument is put in a right-aligned \cs{makebox} the
% same width as the indent.
%
% The \cs{YARIngWrapperHook} simplifies the implicit syntax discussed below.
%
%    \begin{macrocode}
\def\YARIngWrapperHook{}
\NewDocumentCommand\YARIng{om}{%
  \par\YARIngredientFont\hangpara{%
    \csname YAR\theYARsection IngDentWidth\endcsname}{1}%
  \adjustbox{gstore width=\YARtempdim,discard}{\YARIngredientFont#2}%
  \IfNoValueTF{#1}{%
    \ifdimcomp{\YARtempdim}{>}{\YARWidestIngredient}{%
      \global\deflength{\YARWidestIngredient}{\YARtempdim}}{}%
  }{%
    \ifdimcomp{\YARtempdim}{>}{\YARWidestFoodstuff}{%
      \global\deflength{\YARWidestFoodstuff}{\YARtempdim}}{}%
    \adjustbox{gstore width=\YARtempdim,discard}{\YARIngredientFont#1\space}%
    \ifdimcomp{\YARtempdim}{>}{\YARWidestIngDent}{%
      \global\deflength{\YARWidestIngDent}{\YARtempdim}}{}%
    \makebox[\csname YAR\theYARsection IngDentWidth\endcsname][r]{#1\space}%
  }%
  #2\YARIngWrapperHook
}
%    \end{macrocode}
%
% When starting a \env{YARecipe}, we process any keys given. We insert the
% appropriate space before the recipe, and according to the options trigger
% the recipe being included in the table of contents and page headers, and label
% it for use as a reference target.
%
% We then set the right paragraph shape, set the recipe title, then calculate
% how wide the method column should be. The \cs{YARecipeWrapperHook} simplifies
% the implicit syntax discussed below.
%
% When closing the environment, we insert the chosen vertical space.
%
%    \begin{macrocode}
\def\YARecipeWrapperHook{}
\NewDocumentEnvironment{YARecipe}{omo}{%
  \IfValueT{#1}{\yarset{#1}}%
  \deflength{\parindent}{0pt}%
  \par\vspace{\YARPreRecipeSkip}%
  \ifYARnumbered
    \refstepcounter{YARnumber}%
  \fi
  \ifYARecipeInTOC
    \ifcsdef{phantomsection}{\phantomsection}{}%
    \yarget{toc level}%
    \addcontentsline{toc}{\YARtempcs}{#2}%
  \fi
  \ifYARMarkBoth
    \markboth{#2}{#2}%
  \else\ifYARMarkRight
    \markright{#2}%
  \fi\fi
  \yarget{label}\expandafter\ifblank\expandafter{\YARtempcs}{}{%
    \label{\YARtempcs}\yarset{label=}}%
  \ifYARnumbered{\YARNumFont\YARDoNum}\fi
  {\YARTitleFont #2}\IfValueT{#3}{\hfill{\YARNoteFont#3}}\\[-0.75em]
  \rule{\linewidth}{0.4pt}%
  \deflength{\parskip}{\YARStepSkip}%
  \setcounter{YARstep}{\YARStartStep}%
  \deflength{\YARMethodColWidth}{\linewidth-\csname YAR\theYARsection IngColWidth\endcsname-\csname YAR\theYARsection StepColWidth\endcsname}%
  \par\nopagebreak\YARecipeWrapperHook
}{%
  \vspace{\YARPostRecipeSkip}%
}
%    \end{macrocode}
%
% With \env{YARecipeSteps}, we basically take \env{YARecipe} and strip out all
% the parts related to titling and cross-referencing.
%
%    \begin{macrocode}
\NewDocumentEnvironment{YARecipeSteps}{o}{%
  \IfValueT{#1}{\yarset{#1}}%
  \par\vspace{\YARPreRecipeSkip}%
  \deflength{\parindent}{0pt}%
  \deflength{\parskip}{\YARStepSkip}%
  \setcounter{YARstep}{\YARStartStep}%
  \deflength{\YARMethodColWidth}{\linewidth-\csname YAR\theYARsection IngColWidth\endcsname-\csname YAR\theYARsection StepColWidth\endcsname}%
  \par\nopagebreak\YARecipeWrapperHook
}{%
  \vspace{\YARPostRecipeSkip}%
}
%    \end{macrocode}
%
% \section{Implicit syntax}
%
% With a bit of wizardry, we can reduce the verbosity needed. The normal user
% commands expand to the explicit syntax above.
%
% \cs{YARchecknext} is used inside a \env{YARIngBox}. It checks if the next
% token is \cs{ing}, and if it isn't, closes the current \env{YARIngBox} and
% starts a \env{YARMethodBox}.
%
%    \begin{macrocode}
\def\YARchecknext#1{%
  \let\YAR@test#1
  \ifdefequal{\YAR@test}{\ing}{}{%
    \end{YARIngBox}\begin{YARMethodBox}%
  }#1%
}
%    \end{macrocode}
%
% Using \env{recipe} starts a \env{YARecipe}, but then (using the hooks
% introduced above) immediately starts a \env{YARIngBox} and begins scanning for
% \cs{ing} tokens.
%
%    \begin{macrocode}
\NewDocumentEnvironment{recipe}{}{%
  \def\YARecipeWrapperHook{\begin{YARIngBox}\YARchecknext}%
  \def\YARIngWrapperHook{\YARchecknext}%
  \begin{YARecipe}%
}{%
  \end{YARMethodBox}%
  \end{YARecipe}%
  \def\YARIngWrapperHook{}%
  \def\YARecipeWrapperHook{}%
}
%    \end{macrocode}
% Using \env{recipesteps} does the same but starts a \env{YARecipeSteps}
% environment instead.
%
%    \begin{macrocode}
\NewDocumentEnvironment{recipesteps}{}{%
  \def\YARecipeWrapperHook{\begin{YARIngBox}\YARchecknext}%
  \def\YARIngWrapperHook{\YARchecknext}%
  \begin{YARecipeSteps}%
}{%
  \end{YARMethodBox}%
  \end{YARecipeSteps}%
  \def\YARIngWrapperHook{}%
  \def\YARecipeWrapperHook{}%
}
%    \end{macrocode}
%
% The main thing of interest that \cs{ing} does is check to see if we are in a
% \env{YARMethodBox} and, if so, closes it and starts a \env{YARIngBox} before
% calling \cs{YARIng}.
%
%    \begin{macrocode}
\NewDocumentCommand\ing{}{%
  \iftoggle{inYARMethodBox}{\end{YARMethodBox}\begin{YARIngBox}}{}%
  \YARIng
}
%    \end{macrocode}
%
% \cs{newstep} manually closes the current \env{YARMethodBox} and starts a new
% one, inserting an empty \env{YARIngBox} inbetween to preserve the spacing.
%
%    \begin{macrocode}
\newcommand{\newstep}{%
  \end{YARMethodBox}%
  \begin{YARIngBox}%
  \end{YARIngBox}%
  \begin{YARMethodBox}%
}
%    \end{macrocode}
%
% There is no more.
%
% \iffalse %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%</sty>
% \fi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\Finale
